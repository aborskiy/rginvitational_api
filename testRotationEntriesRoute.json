{
  "stats": {
    "suites": 8,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-15T20:08:35.066Z",
    "end": "2019-05-15T20:08:36.930Z",
    "duration": 1864,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "9acfeab6-20e1-4ff0-a0ef-d894610bd11a",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "c09509c6-a399-4137-97ba-be5c77aceec9",
        "title": "rotationentries",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
        "file": "/test/api/routes/rotationentries.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "rotationentries \"before all\" hook",
            "timedOut": false,
            "duration": 1314,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n    console.log(`test rotationentries before starts`);\n    await requestTestAccessToken.getTestToken(callback);\n    await seed();\n    //console.log(`testaccesstoken: ${testAccessToken.token_type} ${testAccessToken.access_token}`);\n    console.log(`test rotationentries before ends`);\n}\ncatch (e) {\n    console.log(`test rotationentries before exception is caught: ${e} `);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "59c5a428-9dc2-4dc4-9e20-dfe0eb1cb8e2",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationentries \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationEntry = {\n    \"rotaId\": 1,\n    \"participantId\": 908,\n    \"name\": \"Julia B\",\n    \"team\": \"RUS\",\n    \"apparatus\": {\n        \"id\": \"floor\",\n        \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"floor\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n};\ninvalidRotationEntry = {\n    \"rotaId\": 1,\n    \"participantId\": 908,\n    \"team\": \"RUS\",\n    \"apparatus\": {\n        \"id\": \"dummy\",\n        \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"floor\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n};",
            "err": {},
            "isRoot": false,
            "uuid": "4052ae5a-4fac-4623-b0bf-95c632f1c42e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "2b982871-4641-4e0a-8270-094d926898c7",
            "title": "GET rotationentries",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all rotationentries",
                "fullTitle": "rotationentries GET rotationentries should get all rotationentries",
                "timedOut": false,
                "duration": 40,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/rotationentries')\n    //.expect(200)\n    .then(res => {\n        console.log(`GET rotationentries test is before assertions response body: ${JSON.stringify(res.body)}`);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.length.should.be.above(0);\n        //res.body.length.should.be.above(0);\n        console.log(`GET rotationentries test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "3cc425c5-2805-464e-b9c3-419ddf4859f1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "3cc425c5-2805-464e-b9c3-419ddf4859f1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 40,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "7366c58b-f927-4bec-804d-acde9b1ee0af",
            "title": "POST rotationentries",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing rotation entry",
                "fullTitle": "rotationentries POST rotationentries should fail with 401 UnauthorizedError when POSTing rotation entry",
                "timedOut": false,
                "duration": 209,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationentries')\n    .send(rotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "45042c6b-3685-4adf-9721-91dc7fc5d2a6",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing rotationentries with 'apparatus id is invalid' error",
                "fullTitle": "rotationentries POST rotationentries should fail validation before POSTing rotationentries with 'apparatus id is invalid' error",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationentries')\n    .send(invalidRotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.length.should.be.above(0);\n        res.body[0].msg.should.equal('name does not exist');\n        res.body[1].msg.should.equal('apparatus id is invalid, should be floor, hoop, rope, ribbon');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "04a72e43-cee0-47d0-a3b4-cb9914369599",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one rotationentry",
                "fullTitle": "rotationentries POST rotationentries should POST one rotationentry",
                "timedOut": false,
                "duration": 47,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationentries')\n    .send(rotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('rotaId');\n        res.body.name.should.equal(rotationEntry.name);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8523b869-bbbe-4a65-9c1c-5311da0cb5f6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "45042c6b-3685-4adf-9721-91dc7fc5d2a6",
              "04a72e43-cee0-47d0-a3b4-cb9914369599",
              "8523b869-bbbe-4a65-9c1c-5311da0cb5f6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 371,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "dd0ae3d5-9e66-4877-96e1-0320532947ce",
            "title": "PUT rotationentry",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one rotationentry",
                "fullTitle": "rotationentries PUT rotationentry should PUT one rotationentry",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationentries/1')\n    .send(rotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('rotaId');\n        res.body.rotaId.should.equal(rotationEntry.rotaId);\n        res.body.name.should.equal(rotationEntry.name);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "36a19ffb-9140-46b3-a20e-aaf169c8bc33",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "rotationentries PUT rotationentry should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 35,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationentries/0102039848')\n    .send(rotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d9f79bf8-b27c-4bf1-a640-7576d4c6bb1e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "rotationentries PUT rotationentry should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationentries/fake')\n    .send(rotationEntry)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c64d8c8c-254c-43f3-bbf3-6a841514b4a8",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "36a19ffb-9140-46b3-a20e-aaf169c8bc33",
              "d9f79bf8-b27c-4bf1-a640-7576d4c6bb1e",
              "c64d8c8c-254c-43f3-bbf3-6a841514b4a8"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 73,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "0bbc2141-2e15-47d7-8017-c9636b6d7662",
            "title": "DELETE rotationentry",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one rotationentry",
                "fullTitle": "rotationentries DELETE rotationentry should DELETE one rotationentry",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete('/api/rotationentries/1')\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('rotaId');\n        res.body.rotaId.should.equal(rotationEntry.rotaId);\n        res.body.name.should.equal(rotationEntry.name);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "0d93752a-a245-4ed1-8aec-3498d28f6f03",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0d93752a-a245-4ed1-8aec-3498d28f6f03"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 11,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      },
      {
        "uuid": "cf312476-a456-4fa5-80d8-bdbef2ea7a9e",
        "title": "rotationentries bulk",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
        "file": "/test/api/routes/rotationentries.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationentries bulk \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationEntries = [{\n    \"rotaId\": 1,\n    \"participantId\": 908,\n    \"name\": \"Julia B\",\n    \"team\": \"RUS\",\n    \"apparatus\": {\n        \"id\": \"floor\",\n        \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"floor\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n},\n{\n    \"rotaId\": 2,\n    \"participantId\": 909,\n    \"name\": \"Second T\",\n    \"team\": \"UKR\",\n    \"apparatus\": {\n        \"id\": \"rope\",\n        \"imageurl\": \"images/rope-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"rope\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n}];",
            "err": {},
            "isRoot": false,
            "uuid": "5d9f7b64-09ba-411e-9411-b0491d84e7a0",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "d8becd3a-6f9e-48a9-bacc-00ff2b2564c2",
            "title": "POST rotationentries BULK",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should POST BULK rotationentries",
                "fullTitle": "rotationentries bulk POST rotationentries BULK should POST BULK rotationentries",
                "timedOut": false,
                "duration": 22,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationentries')\n    .send(rotationEntries)\n    .set('Accept', 'application/json')\n    .set('X-Action', 'bulk')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationentry before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationentry before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        //res.body.should.have.property('rotaId');\n        //res.body.name.should.equal(rotationEntry.name);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9b17a35c-a2e5-4ba9-a240-58461ed59687",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9b17a35c-a2e5-4ba9-a240-58461ed59687"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 22,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "9cac290c-edef-497f-bcc4-4604cec91698",
            "title": "DELETE rotationentries BULK",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationentries.js",
            "file": "/test/api/routes/rotationentries.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE BULK rotationentries",
                "fullTitle": "rotationentries bulk DELETE rotationentries BULK should DELETE BULK rotationentries",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete('/api/rotationentries')\n    .send(rotationEntries)\n    .set('Accept', 'application/json')\n    .set('X-Action', 'bulk')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 200\n        console.log(`in end after should DELETE BULK rotationentries`);\n        //console.log(`should POST one rotationentry before assertions, response header: ${res.header}`);\n        //console.log(`should POST one rotationentry before assertions, response info: ${res.info}`);\n        //console.log(`should POST one rotationentry before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b66709b0-cd7e-4bb7-a1c3-96474b4aa6cd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b66709b0-cd7e-4bb7-a1c3-96474b4aa6cd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 6,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}