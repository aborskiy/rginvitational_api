{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-29T02:11:45.873Z",
    "end": "2019-04-29T02:11:47.088Z",
    "duration": 1215,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "e3a0f809-6f95-41fb-8259-db01896b5341",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "b494ef4a-08fd-4e4d-9576-40c0269e985e",
        "title": "scores",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
        "file": "/test/api/routes/scores.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "scores \"before all\" hook",
            "timedOut": false,
            "duration": 831,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n    console.log(`test scores before starts`);\n    await requestTestAccessToken.getTestToken(callback);\n    await seed();\n    //console.log(`testaccesstoken: ${testAccessToken.token_type} ${testAccessToken.access_token}`);\n    console.log(`test scores before ends`);\n}\ncatch (e) {\n    console.log(`test scores before exception is caught: ${e} `);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "21c15f71-43f6-4f4e-8fed-eee8e7c18826",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1b61c197-eee6-467e-a12c-d2bf85b490f6",
            "title": "GET scores",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all scores",
                "fullTitle": "scores GET scores should get all scores",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/scores')\n    //.expect(200)\n    .then(res => {\n        console.log(`GET scores test is before assertions response body: ${JSON.stringify(res.body)}`);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.length.should.be.above(0);\n        //res.body.length.should.be.above(0);\n        console.log(`GET scores test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "9061c53c-01a1-44ae-be33-898c60c34466",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9061c53c-01a1-44ae-be33-898c60c34466"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 38,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "58f5e3cf-a2c2-4953-b8d6-739c8de3509f",
            "title": "POST scores",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing participant",
                "fullTitle": "scores POST scores should fail with 401 UnauthorizedError when POSTing participant",
                "timedOut": false,
                "duration": 222,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2a733387-a64f-4cf0-9860-75c1231121fb",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing score with '4 scores must be present' error",
                "fullTitle": "scores POST scores should fail validation before POSTing score with '4 scores must be present' error",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(invalidScoreNoScores)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body[0].msg.should.equal('name does not exist');\n        res.body[3].msg.should.equal('4 scores must be present');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6fb52201-b079-4515-aa91-c11da0cd8c3b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one score",
                "fullTitle": "scores POST scores should POST one score",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "c1b4444b-ea5d-48d1-87d3-20f9c2bc560f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2a733387-a64f-4cf0-9860-75c1231121fb",
              "6fb52201-b079-4515-aa91-c11da0cd8c3b",
              "c1b4444b-ea5d-48d1-87d3-20f9c2bc560f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 257,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "afb552cf-4957-47eb-8211-f3b1f4b56b90",
            "title": "PUT participant",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one score",
                "fullTitle": "scores PUT participant should PUT one score",
                "timedOut": false,
                "duration": 33,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores/901')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one score before assertions, response header: ${res.header}`);\n        console.log(`should PUT one score before assertions, response info: ${res.info}`);\n        console.log(`should PUT one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1505513c-8b0f-4683-b69f-fa0d46290cc9",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "scores PUT participant should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e20b7b98-144e-4358-90d9-405ea85572bd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "scores PUT participant should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores/fake')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d0674e19-ef4d-45e2-acb9-1b6b7397328c",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "1505513c-8b0f-4683-b69f-fa0d46290cc9",
              "e20b7b98-144e-4358-90d9-405ea85572bd",
              "d0674e19-ef4d-45e2-acb9-1b6b7397328c"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 46,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "241aac15-ab2c-43d5-9132-e3e7909c6e6a",
            "title": "DELETE score",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one score",
                "fullTitle": "scores DELETE score should DELETE one score",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete('/api/scores/901')\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one score before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one score before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8da14996-ffdc-45b6-9d7c-3b34abc1b644",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8da14996-ffdc-45b6-9d7c-3b34abc1b644"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 15,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}