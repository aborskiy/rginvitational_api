{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-11T13:15:08.342Z",
    "end": "2019-05-11T13:15:09.646Z",
    "duration": 1304,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "6f2253da-f3c9-4656-86f7-8af6a8e8073b",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f77537c8-744d-4ab1-ac6a-1f38233e3cc7",
        "title": "scores",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
        "file": "/test/api/routes/scores.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "scores \"before all\" hook",
            "timedOut": false,
            "duration": 863,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n    console.log(`test scores before starts`);\n    await requestTestAccessToken.getTestToken(callback);\n    await seed();\n    //console.log(`testaccesstoken: ${testAccessToken.token_type} ${testAccessToken.access_token}`);\n    console.log(`test scores before ends`);\n}\ncatch (e) {\n    console.log(`test scores before exception is caught: ${e} `);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "4a7f209c-95a9-4dd5-9215-6d4f17524986",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "961c5f76-89fd-49c7-8de0-0e89e9c8b18e",
            "title": "GET scores",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all scores",
                "fullTitle": "scores GET scores should get all scores",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/scores')\n    //.expect(200)\n    .then(res => {\n        console.log(`GET scores test is before assertions response body: ${JSON.stringify(res.body)}`);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.length.should.be.above(0);\n        //res.body.length.should.be.above(0);\n        console.log(`GET scores test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "904694c0-bc80-4218-b67a-de8930e657fd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "904694c0-bc80-4218-b67a-de8930e657fd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "298c1ea1-2e21-4058-8ce3-7a6c27a64f2f",
            "title": "POST scores",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing participant",
                "fullTitle": "scores POST scores should fail with 401 UnauthorizedError when POSTing participant",
                "timedOut": false,
                "duration": 252,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fa5b0033-3055-4a99-8570-4b1821c0cb82",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing score with '4 scores must be present' error",
                "fullTitle": "scores POST scores should fail validation before POSTing score with '4 scores must be present' error",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(invalidScoreNoScores)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body[0].msg.should.equal('name does not exist');\n        res.body[3].msg.should.equal('4 scores must be present');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1ab11b10-c040-4a33-adc8-82b768e10993",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one score",
                "fullTitle": "scores POST scores should POST one score",
                "timedOut": false,
                "duration": 18,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "26ce7723-eae8-492b-83d3-a3ffa311d6d1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa5b0033-3055-4a99-8570-4b1821c0cb82",
              "1ab11b10-c040-4a33-adc8-82b768e10993",
              "26ce7723-eae8-492b-83d3-a3ffa311d6d1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 288,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "7c0b4718-ef37-4d29-a10b-e019f7103281",
            "title": "PUT participant",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one score",
                "fullTitle": "scores PUT participant should PUT one score",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores/901')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one score before assertions, response header: ${res.header}`);\n        console.log(`should PUT one score before assertions, response info: ${res.info}`);\n        console.log(`should PUT one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "430e1012-9190-40dd-85cd-7b75e28c95dd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "scores PUT participant should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "e5fe97e8-01d4-4606-90c4-67a8a5daa3cd",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "scores PUT participant should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 15,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/scores/fake')\n    .send(score1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one score before assertions, response header: ${res.header}`);\n        console.log(`should POST one score before assertions, response info: ${res.info}`);\n        console.log(`should POST one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "44154e60-712e-4c92-ac89-d279c31dc3be",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "430e1012-9190-40dd-85cd-7b75e28c95dd",
              "e5fe97e8-01d4-4606-90c4-67a8a5daa3cd",
              "44154e60-712e-4c92-ac89-d279c31dc3be"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 63,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "1cdab62a-4f43-4b78-8f3c-2b43052378a4",
            "title": "DELETE score",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one score",
                "fullTitle": "scores DELETE score should DELETE one score",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete('/api/scores/901')\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one score before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one score before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one score before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n        res.body.name.should.equal('Carol MacDonald');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "811c930f-c0c3-4155-8c5f-0366510e3e9a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "811c930f-c0c3-4155-8c5f-0366510e3e9a"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}