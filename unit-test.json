{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-30T01:25:52.452Z",
    "end": "2019-04-30T01:25:52.507Z",
    "duration": 55,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "c2917809-926e-4a97-a7cf-7b567c635338",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "2bf2c288-960e-45a7-9ea6-82d08602d96b",
        "title": "participantInfoModel Tests",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/models/participantInfoModel.js",
        "file": "/test/api/models/participantInfoModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "participantInfoModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "participantInfo = {\n    \"name\": {\n        \"first\": \"Carol\",\n        \"last\": \"MacDonald\"\n    },\n    \"team\": \"USA\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "dad43439-dfff-4d61-9f81-ffe16808a24e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a participantInfo",
            "fullTitle": "participantInfoModel Tests should validate a participantInfo",
            "timedOut": false,
            "duration": 13,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new participantInfoModel(participantInfo);\nmodel.validate((err) => {\n    should.not.exist(err);\n    console.log(`test participantInfoModel model ${model}`);\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('updated');\n    should(model.name.first).be.a.String();\n    model.name.first.should.equal(participantInfo.name.first);\n    model.name.last.should.equal(participantInfo.name.last);\n    model.team.should.equal(participantInfo.team);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ab0aa527-3aca-4cc8-8267-143dd4867df7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "participantInfoModel Tests should validate required properties",
            "timedOut": false,
            "duration": 4,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const badParticipantInfo = {\n            model: \"Not real\"\n        };\n        const model = new participantInfoModel(badParticipantInfo);\n        model.validate((err) => {\n            const errors = err.errors;\n            errors.should.have.property(\"name.first\");\n            errors.should.have.property(\"name.last\");\n            errors.should.have.property(\"team\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "808d3e21-ebd7-417b-834e-f820a4a53815",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ab0aa527-3aca-4cc8-8267-143dd4867df7",
          "808d3e21-ebd7-417b-834e-f820a4a53815"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 17,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "f2066d2c-c698-4161-a3af-99664f758e4e",
        "title": "participantScoreModel Tests",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/models/participantScoreModel.js",
        "file": "/test/api/models/participantScoreModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "participantScoreModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "participantScores = {\n    \"id\": 378,\n    \"name\": \"Carol MacDonald\",\n    \"team\": \"USA\",\n    \"scores\": [\n      {\n        \"id\": \"floor\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n      },\n      {\n        \"id\": \"rope\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n      },\n      {\n        \"id\": \"hoop\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n      },\n      {\n        \"id\": \"ribbon\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n      }\n    ],\n    \"total\": 0\n  };",
            "err": {},
            "isRoot": false,
            "uuid": "30d973ee-4bf2-4b88-b304-15bc0c61abfa",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a participantScore",
            "fullTitle": "participantScoreModel Tests should validate a participantScore",
            "timedOut": false,
            "duration": 11,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new participantScoreModel(participantScores);\nmodel.validate((err) => {\n    should.not.exist(err);\n    console.log(`test participantScoreModel model ${model}`);\n    model.should.have.property('id');\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('scores');\n    model.should.have.property('updated');\n    model.should.have.property('total');\n    should(model.name).be.a.String();\n    model.name.should.equal(participantScores.name);\n    model.team.should.equal(participantScores.team);\n    model.scores.should.be.an.instanceof(Array);\n    model.scores.length.should.equal(4);  \n    model.scores[0].should.have.property('id');\n    should(model.scores[0].id).be.a.String();\n    model.scores[0].id.should.equal(participantScores.scores[0].id);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "ab3bc811-0aa1-47a6-8dca-13b333290c66",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "participantScoreModel Tests should validate required properties",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const badParticipantScores = {\n            model: \"Not real\"\n        };\n        const model = new participantScoreModel(badParticipantScores);\n        model.validate((err) => {\n            const errors = err.errors;\n            errors.should.have.property(\"id\");\n            errors.should.have.property(\"name\");\n            errors.should.have.property(\"team\");\n            errors.should.have.property(\"total\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "b40a208c-d6c8-4be7-881a-4de2a54f4a9c",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "ab3bc811-0aa1-47a6-8dca-13b333290c66",
          "b40a208c-d6c8-4be7-881a-4de2a54f4a9c"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 13,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "af853880-2374-45e4-b511-96e4c9fbcfaf",
        "title": "rotationEntryModel Tests",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/models/rotationEntryModel.js",
        "file": "/test/api/models/rotationEntryModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationEntryModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationEntry = {\n  \"rotaId\": 1,\n  \"participantId\": 908,\n  \"name\": \"Julia B\",\n  \"team\": \"RUS\",\n  \"apparatus\": {\n    \"id\": \"floor\",\n    \"imageurl\": \"images/floor-min-2.png\"\n  },\n  \"score\": {\n    \"id\": \"floor\",\n    \"diff\": 9.3,\n    \"exec\": 9,\n    \"deduct\": 0.1,\n    \"total\": 18.2\n  }\n};\nrotationEntryInvalidApparatusId = {\n    \"rotaId\": 2,\n    \"participantId\": 908,\n    \"name\": \"Julia B\",\n    \"team\": \"RUS\",\n    \"apparatus\": {\n      \"id\": \"dummy\",\n      \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n      \"id\": \"floor\",\n      \"diff\": 9.3,\n      \"exec\": 9,\n      \"deduct\": 0.1,\n      \"total\": 18.2\n    }\n  };",
            "err": {},
            "isRoot": false,
            "uuid": "2f3eacd2-b5bc-41b4-83a2-463bc7d58242",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a rotationEntry",
            "fullTitle": "rotationEntryModel Tests should validate a rotationEntry",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new rotationEntryModel(rotationEntry);\nconsole.log(`rotationEntryModel instance: ${model}`);\nmodel.validate((err) => {\n    should.not.exist(err);\n    console.log(`test rotationEntryModel model ${model}`);\n    model.should.have.property('rotaId');\n    model.should.have.property('participantId');\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('apparatus');\n    model.should.have.property('score');\n    model.should.have.property('updated');\n    should(model.rotaId).be.a.Number();\n    should(model.participantId).be.a.Number();\n    should(model.name).be.a.String();\n    model.rotaId.should.equal(rotationEntry.rotaId);\n    model.team.should.equal(rotationEntry.team);\n    model.score.should.have.property('id');\n    should(model.score.id).be.a.String();\n    model.score.id.should.equal(rotationEntry.score.id);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "90e45294-edb2-4caa-b4d4-a0f15cdce0d8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "rotationEntryModel Tests should validate required properties",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const badRotationEntry = {\n    model: \"Not real\"\n};\nconst model = new rotationEntryModel(badRotationEntry);\nmodel.validate((err) => {\n    const errors = err.errors;\n    errors.should.have.property(\"participantId\");\n    errors.should.have.property(\"name\");\n    errors.should.have.property(\"team\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "79f2ed1d-5595-49f0-9cb9-9cb76599e3a8",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should fail when invalid apparatus id",
            "fullTitle": "rotationEntryModel Tests should fail when invalid apparatus id",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new rotationEntryModel(rotationEntryInvalidApparatusId);\nmodel.validate((err) => {\n    const errors = err.errors;\n    console.log(`errors: ${errors.MongooseError}`);\n    errors.should.have.property(\"apparatus.id\");\n    errors[\"apparatus.id\"].should.have.property(\"name\");\n    errors[\"apparatus.id\"].name.should.equal('ValidatorError');\n    errors[\"apparatus.id\"].message.should.equal('`dummy` is not a valid enum value for path `id`.');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8d84c828-fbe7-4939-a366-ade50d75e39f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "90e45294-edb2-4caa-b4d4-a0f15cdce0d8",
          "79f2ed1d-5595-49f0-9cb9-9cb76599e3a8",
          "8d84c828-fbe7-4939-a366-ade50d75e39f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 11,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "8ebc21d0-d44c-467f-a5ba-5333e2ac3d7d",
        "title": "rotationSessionModel Tests",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/models/rotationSessionModel.js",
        "file": "/test/api/models/rotationSessionModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationSessionModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n  \"onFloorParticipantId\": 3,\n  \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {\n};",
            "err": {},
            "isRoot": false,
            "uuid": "1c817424-6ca3-48e7-837b-e4ac5b286451",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a rotationSession",
            "fullTitle": "rotationSessionModel Tests should validate a rotationSession",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new rotationSessionModel(rotationSession);\nconsole.log(`rotationSessionModel instance: ${model}`);\nmodel.validate((err) => {\n    should.not.exist(err);\n    console.log(`test rotationSessionModel model ${model}`);\n    model.should.have.property('onFloorParticipantId');\n    model.should.have.property('scoreParticipantId');\n    should(model.onFloorParticipantId).be.a.Number();\n    should(model.scoreParticipantId).be.a.Number();\n    model.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    model.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "9d50732f-1f1b-4018-911f-78ef36f5f8b3",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "rotationSessionModel Tests should validate required properties",
            "timedOut": false,
            "duration": 1,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "const model = new rotationSessionModel(rotationSessionMissingParms);\nmodel.validate((err) => {\n    const errors = err.errors;\n    errors.should.have.property(\"onFloorParticipantId\");\n    errors.should.have.property(\"scoreParticipantId\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "82813a4e-a1b1-4767-8ea5-9a37fb9caf3e",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "9d50732f-1f1b-4018-911f-78ef36f5f8b3",
          "82813a4e-a1b1-4767-8ea5-9a37fb9caf3e"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 2,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}