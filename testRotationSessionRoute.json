{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-11T14:17:13.867Z",
    "end": "2019-05-11T14:17:14.834Z",
    "duration": 967,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "df57826b-a102-4568-93d1-8d48c25411a6",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "da4d6a5d-6d34-4010-9c15-ae04c593e6b1",
        "title": "rotationsession",
        "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationsession.js",
        "file": "/test/api/routes/rotationsession.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "rotationsession \"before all\" hook",
            "timedOut": false,
            "duration": 8,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n    console.log(`test rotationsession before starts`);\n    await requestTestAccessToken.getTestToken(callback);\n    console.log(`test rotationsession before ends`);\n}\ncatch (e) {\n    console.log(`test rotationsession before exception is caught: ${e} `);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "dd9dd8f3-9dd8-41bd-bd77-2400d8bfd54f",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationsession \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n    \"onFloorParticipantId\": 3,\n    \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {\n};",
            "err": {},
            "isRoot": false,
            "uuid": "12aeb0b6-7257-4c02-8802-082e6489a214",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "43237611-db2b-4fc5-95ad-3d3e1bcf75ae",
            "title": "POST rotationsession",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing rotation entry",
                "fullTitle": "rotationsession POST rotationsession should fail with 401 UnauthorizedError when POSTing rotation entry",
                "timedOut": false,
                "duration": 267,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "60eb8fc3-f362-44f8-ae7a-0866e9c968d7",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing rotationsession - missing parameters",
                "fullTitle": "rotationsession POST rotationsession should fail validation before POSTing rotationsession - missing parameters",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(`about to send post request to /api/rotationsession with rotationSessionMissingParms `);\nrequest(app)\n    .post('/api/rotationsession')\n    .send(rotationSessionMissingParms)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.length.should.be.above(0);\n        res.body[0].msg.should.equal('onFloorParticipantId does not exist');\n        res.body[1].msg.should.equal('scoreParticipantId does not exist');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "23bfcd3d-ae84-4830-b53f-181f9b7ac48c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one rotationSession",
                "fullTitle": "rotationsession POST rotationsession should POST one rotationSession",
                "timedOut": false,
                "duration": 545,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        sessionId = res.body._id;\n        console.log(`sessionId is assigned after POSt: ${sessionId}` );\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "4911f9b7-e1cf-4587-aa5e-a68f145731d2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "60eb8fc3-f362-44f8-ae7a-0866e9c968d7",
              "23bfcd3d-ae84-4830-b53f-181f9b7ac48c",
              "4911f9b7-e1cf-4587-aa5e-a68f145731d2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 835,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "9d6edaea-2f27-4613-81bc-e576603adf22",
            "title": "GET rotationsession",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get rotationsession",
                "fullTitle": "rotationsession GET rotationsession should get rotationsession",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/rotationsession')\n    //.expect(200)\n    .end((err, res) => {\n        console.log(`GET rotationsession test is before assertions response body: ${JSON.stringify(res.body)}`);\n        if (err) return done(err);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.length.should.be.above(0);\n        //res.body.length.should.be.above(0);\n        console.log(`GET rotationsession test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "57fd9103-87a1-46af-958e-836d1601d1b5",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57fd9103-87a1-46af-958e-836d1601d1b5"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "efb047b6-8f82-49e7-a3a0-b6062b9e0fed",
            "title": "PUT rotationSession",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one rotationSession",
                "fullTitle": "rotationsession PUT rotationSession should PUT one rotationSession",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(`checking if sessionId present: ${sessionId}`);\nrequest(app)\n    .put(`/api/rotationsession/${sessionId}`)\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "fa1d8d50-1be6-4a73-bbb7-b7b721533c7e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "rotationsession PUT rotationSession should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 5,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9bb7c91e-b17e-47d8-8bb1-296d9fc90732",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not invalid id parameter",
                "fullTitle": "rotationsession PUT rotationSession should fail PUT request validation with not invalid id parameter",
                "timedOut": false,
                "duration": 7,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationsession/fake')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "18da719a-31ab-4fbc-b917-cbc43dfd1319",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "fa1d8d50-1be6-4a73-bbb7-b7b721533c7e",
              "9bb7c91e-b17e-47d8-8bb1-296d9fc90732",
              "18da719a-31ab-4fbc-b917-cbc43dfd1319"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "de59962f-218d-4607-9020-50567f45d82f",
            "title": "DELETE rotationSession",
            "fullFile": "/home/travis/build/aborskiy/rginvitational_api/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one rotationSession",
                "fullTitle": "rotationsession DELETE rotationSession should DELETE one rotationSession",
                "timedOut": false,
                "duration": 12,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete(`/api/rotationsession/${sessionId}`)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8213ea62-76b8-4eab-a164-d6d1beae8610",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8213ea62-76b8-4eab-a164-d6d1beae8610"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 12,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}