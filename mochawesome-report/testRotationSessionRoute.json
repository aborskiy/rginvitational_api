{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-05-19T02:19:28.080Z",
    "end": "2019-05-19T02:19:31.437Z",
    "duration": 3357,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "437b9d97-add1-44e5-9980-656f9ee00752",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f9542110-a108-469a-96df-d83a8d7abad7",
        "title": "rotationsession",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
        "file": "/test/api/routes/rotationsession.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "rotationsession \"before all\" hook",
            "timedOut": false,
            "duration": 6,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "try {\n    console.log(`test rotationsession before starts`);\n    await requestTestAccessToken.getTestToken(callback);\n    console.log(`test rotationsession before ends`);\n}\ncatch (e) {\n    console.log(`test rotationsession before exception is caught: ${e} `);\n}",
            "err": {},
            "isRoot": false,
            "uuid": "443a6f3d-6f54-4661-b10a-304311290326",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationsession \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n    \"onFloorParticipantId\": 3,\n    \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {\n};",
            "err": {},
            "isRoot": false,
            "uuid": "1401c490-5644-4fd8-906f-0907d4026b28",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "4adede74-324c-41f0-bb51-cfddcf5c4b5c",
            "title": "POST rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing rotation entry",
                "fullTitle": "rotationsession POST rotationsession should fail with 401 UnauthorizedError when POSTing rotation entry",
                "timedOut": false,
                "duration": 570,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6082aafb-0390-4f58-8adc-5afb7efa4387",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing rotationsession - missing parameters",
                "fullTitle": "rotationsession POST rotationsession should fail validation before POSTing rotationsession - missing parameters",
                "timedOut": false,
                "duration": 62,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(`about to send post request to /api/rotationsession with rotationSessionMissingParms `);\nrequest(app)\n    .post('/api/rotationsession')\n    .send(rotationSessionMissingParms)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.length.should.be.above(0);\n        res.body[0].msg.should.equal('onFloorParticipantId does not exist');\n        res.body[1].msg.should.equal('scoreParticipantId does not exist');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "166af4e8-ec8b-4ac0-8e1d-941e135286d0",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one rotationSession",
                "fullTitle": "rotationsession POST rotationsession should POST one rotationSession",
                "timedOut": false,
                "duration": 2353,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should POST one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should POST one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        sessionId = res.body._id;\n        console.log(`sessionId is assigned after POSt: ${sessionId}` );\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "9d39c670-0a25-4dcb-9a52-66a71efcf999",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6082aafb-0390-4f58-8adc-5afb7efa4387",
              "166af4e8-ec8b-4ac0-8e1d-941e135286d0",
              "9d39c670-0a25-4dcb-9a52-66a71efcf999"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 2985,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "cf36f4fa-4cf6-4069-a85a-61ad29e6fefb",
            "title": "GET rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get rotationsession",
                "fullTitle": "rotationsession GET rotationsession should get rotationsession",
                "timedOut": false,
                "duration": 36,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/rotationsession')\n    //.expect(200)\n    .end((err, res) => {\n        console.log(`GET rotationsession test is before assertions response body: ${JSON.stringify(res.body)}`);\n        if (err) return done(err);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.length.should.be.above(0);\n        //res.body.length.should.be.above(0);\n        console.log(`GET rotationsession test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "396656db-1a2c-42cf-9257-c54cc4471d92",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "396656db-1a2c-42cf-9257-c54cc4471d92"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 36,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a4bf17e7-a868-4797-88e8-464faaad5a60",
            "title": "PUT rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one rotationSession",
                "fullTitle": "rotationsession PUT rotationSession should PUT one rotationSession",
                "timedOut": false,
                "duration": 49,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log(`checking if sessionId present: ${sessionId}`);\nrequest(app)\n    .put(`/api/rotationsession/${sessionId}`)\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "2293d489-df4d-48f4-a5a0-d3e02a4d5be8",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "rotationsession PUT rotationSession should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationsession')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6bb34d58-0198-4ef0-84d9-78975a317b05",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not invalid id parameter",
                "fullTitle": "rotationsession PUT rotationSession should fail PUT request validation with not invalid id parameter",
                "timedOut": false,
                "duration": 23,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/rotationsession/fake')\n    .send(rotationSession)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should PUT one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should PUT one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "cdb00963-df82-4184-8e82-97a92453acd6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "2293d489-df4d-48f4-a5a0-d3e02a4d5be8",
              "6bb34d58-0198-4ef0-84d9-78975a317b05",
              "cdb00963-df82-4184-8e82-97a92453acd6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 80,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "a77d7865-8d62-4895-aa5f-c273f44bed6b",
            "title": "DELETE rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one rotationSession",
                "fullTitle": "rotationsession DELETE rotationSession should DELETE one rotationSession",
                "timedOut": false,
                "duration": 30,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete(`/api/rotationsession/${sessionId}`)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one rotationSession before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one rotationSession before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one rotationSession before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('onFloorParticipantId');\n        res.body.should.have.property('scoreParticipantId');\n        res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n        res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "08bc5de8-f491-434b-b477-7327b463f487",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "08bc5de8-f491-434b-b477-7327b463f487"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 30,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}