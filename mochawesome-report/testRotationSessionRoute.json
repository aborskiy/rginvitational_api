{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-24T02:21:22.304Z",
    "end": "2019-04-24T02:21:23.596Z",
    "duration": 1292,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "7046d108-6e19-4bbd-a64d-6c24a1b37b6c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "f069049a-bc7e-48db-8e51-7b095654d743",
        "title": "rotationsession",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
        "file": "/test/api/routes/rotationsession.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "rotationsession \"before all\" hook",
            "timedOut": false,
            "duration": 33,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "4568bc3c-d05e-48e7-8565-693c3b29d835",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationsession \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n    \"onFloorParticipantId\": 3,\n    \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {};",
            "err": {},
            "isRoot": false,
            "uuid": "d52e519f-e5d1-46db-9e81-b098c1f26e87",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "527165a6-d66c-4513-adb2-b11d5d3b2fd3",
            "title": "POST rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing rotation entry",
                "fullTitle": "rotationsession POST rotationsession should fail with 401 UnauthorizedError when POSTing rotation entry",
                "timedOut": false,
                "duration": 550,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg').end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 401\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(401);\n    res.body.should.equal('UnauthorizedError');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e10647f4-2240-4f78-a8ba-11df50843b4d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing rotationsession - missing parameters",
                "fullTitle": "rotationsession POST rotationsession should fail validation before POSTing rotationsession - missing parameters",
                "timedOut": false,
                "duration": 38,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log('about to send post request to /api/rotationsession with rotationSessionMissingParms ');\nrequest(_index.app).post('/api/rotationsession').send(rotationSessionMissingParms).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.length.should.be.above(0);\n    res.body[0].msg.should.equal('onFloorParticipantId does not exist');\n    res.body[1].msg.should.equal('scoreParticipantId does not exist');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4ae00f76-21a5-4c39-af44-d19f32fe4e23",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one rotationSession",
                "fullTitle": "rotationsession POST rotationsession should POST one rotationSession",
                "timedOut": false,
                "duration": 312,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    sessionId = res.body._id;\n    console.log('sessionId is assigned after POSt: ' + sessionId);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "418b2be3-51fb-4c7f-9224-7cc3b361dcc6",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e10647f4-2240-4f78-a8ba-11df50843b4d",
              "4ae00f76-21a5-4c39-af44-d19f32fe4e23",
              "418b2be3-51fb-4c7f-9224-7cc3b361dcc6"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 900,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "89e3d323-39e4-4adf-aca9-f31d48bd5119",
            "title": "GET rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get rotationsession",
                "fullTitle": "rotationsession GET rotationsession should get rotationsession",
                "timedOut": false,
                "duration": 41,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/rotationsession')\n//.expect(200)\n.end(function (err, res) {\n    console.log('GET rotationsession test is before assertions response body: ' + JSON.stringify(res.body));\n    if (err) return done(err);\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.length.should.be.above(0);\n    //res.body.length.should.be.above(0);\n    console.log('GET rotationsession test is completed response body: ' + JSON.stringify(res.body));\n    done();\n});;",
                "err": {},
                "isRoot": false,
                "uuid": "ec8dc62a-b826-49d8-b919-ca0fb47486dd",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "ec8dc62a-b826-49d8-b919-ca0fb47486dd"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 41,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2cdde485-c46d-4e7d-abcf-6b0dca710045",
            "title": "PUT rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one rotationSession",
                "fullTitle": "rotationsession PUT rotationSession should PUT one rotationSession",
                "timedOut": false,
                "duration": 43,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log('checking if sessionId present: ' + sessionId);\nrequest(_index.app).put('/api/rotationsession/' + sessionId).send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "0adaac3e-d855-4812-835a-9c5a340839aa",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "rotationsession PUT rotationSession should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(404);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "72139e8e-d76d-4f75-b215-9b0f8bd07215",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not invalid id parameter",
                "fullTitle": "rotationsession PUT rotationSession should fail PUT request validation with not invalid id parameter",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/rotationsession/fake').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "60fe9df0-acce-4ad7-b86c-9c93a0e697a1",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "0adaac3e-d855-4812-835a-9c5a340839aa",
              "72139e8e-d76d-4f75-b215-9b0f8bd07215",
              "60fe9df0-acce-4ad7-b86c-9c93a0e697a1"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 68,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "6e960bc6-62de-4597-9afa-d14cc5a81833",
            "title": "DELETE rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one rotationSession",
                "fullTitle": "rotationsession DELETE rotationSession should DELETE one rotationSession",
                "timedOut": false,
                "duration": 26,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).delete('/api/rotationsession/' + sessionId).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should DELETE one rotationSession before assertions, response header: ' + res.header);\n    console.log('should DELETE one rotationSession before assertions, response info: ' + res.info);\n    console.log('should DELETE one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "bb3f3cc4-0f4f-4ab1-8058-3f8a7b5458d7",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "bb3f3cc4-0f4f-4ab1-8058-3f8a7b5458d7"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 26,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}