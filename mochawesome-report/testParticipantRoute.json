{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-24T02:18:39.373Z",
    "end": "2019-04-24T02:18:42.101Z",
    "duration": 2728,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ada63426-0b32-45f4-ab9d-661ebb32f72c",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a15168eb-f5f9-48d2-a5c3-a611816006bb",
        "title": "participants",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
        "file": "/test/api/routes/participants.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "participants \"before all\" hook",
            "timedOut": false,
            "duration": 1715,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "e271b221-4b4e-422a-ae2a-5c9d5d664cff",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "49b3c952-60fb-4da3-97b4-ba3f06538d24",
            "title": "GET participants",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all participants",
                "fullTitle": "participants GET participants should get all participants",
                "timedOut": false,
                "duration": 115,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/participants')\n//.expect(200)\n.then(function (res) {\n    console.log('GET participants test is before assertions response body: ' + JSON.stringify(res.body));\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    //res.body.length.should.be.above(0);\n    console.log('GET participants test is completed response body: ' + JSON.stringify(res.body));\n    done();\n});;",
                "err": {},
                "isRoot": false,
                "uuid": "58b4fb72-1885-44a8-8950-8093f1be249f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "58b4fb72-1885-44a8-8950-8093f1be249f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 115,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "2d29bf98-2101-4b5d-b0a4-5d116c2e2733",
            "title": "GET participant by id",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get one participant by id",
                "fullTitle": "participants GET participant by id should get one participant by id",
                "timedOut": false,
                "duration": 46,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/participants/1').expect(200).end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id');\n    res.body.id.should.equal(1);\n    console.log('should GET one participant is completed, response body: ' + JSON.stringify(res.body));\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "50503a4e-ed2a-4f0b-9807-68871322f45b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should NOT get one participant by id",
                "fullTitle": "participants GET participant by id should NOT get one participant by id",
                "timedOut": false,
                "duration": 56,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/participants/-1').expect(404).end(function (err, res) {\n    if (err) return done(err);\n    res.should.have.property('status').equal(404);\n    console.log('should GET one participant is completed, response body: ' + JSON.stringify(res.body));\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "3e648dbd-2680-43de-a1b1-d6c566ccc976",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "50503a4e-ed2a-4f0b-9807-68871322f45b",
              "3e648dbd-2680-43de-a1b1-d6c566ccc976"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 102,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "317f1de5-36e7-4021-a208-e15d5de66360",
            "title": "POST participants",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should POST one participant",
                "fullTitle": "participants POST participants should POST one participant",
                "timedOut": false,
                "duration": 575,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/participants').send(participant1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one participant before assertions, response header: ' + res.header);\n    console.log('should POST one participant before assertions, response info: ' + res.info);\n    console.log('should POST one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('id');\n    res.body.name.first.should.equal('Carol');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "e39d4f13-dacc-4b08-977c-3a94340870ed",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail with 401 UnauthorizedError when POSTing participant",
                "fullTitle": "participants POST participants should fail with 401 UnauthorizedError when POSTing participant",
                "timedOut": false,
                "duration": 8,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/participants').send(participant1).set('Accept', 'application/json').set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 401\n    console.log('should POST one participant before assertions, response header: ' + res.header);\n    console.log('should POST one participant before assertions, response info: ' + res.info);\n    console.log('should POST one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(401);\n    //res.body.should.have.property('id');\n    res.body.should.equal('UnauthorizedError');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "65a77a44-118c-4475-b1f2-fe6601ca683d",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing participant with 'first name does not exist' error",
                "fullTitle": "participants POST participants should fail validation before POSTing participant with 'first name does not exist' error",
                "timedOut": false,
                "duration": 28,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/participants').send(invalidParticipantNoFirstName).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one participant before assertions, response header: ' + res.header);\n    console.log('should POST one participant before assertions, response info: ' + res.info);\n    console.log('should POST one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n    //res.body.should.have.property('param');\n    //res.body.param.should.equal('name.first');\n    //res.body.should.have.property('msg');\n    //res.body.msg.should.equal('first name does not exist');\n    //res.body.name.first.should.equal('Carol');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "46cdd63e-b1f3-4029-990f-680590805176",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "e39d4f13-dacc-4b08-977c-3a94340870ed",
              "65a77a44-118c-4475-b1f2-fe6601ca683d",
              "46cdd63e-b1f3-4029-990f-680590805176"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 611,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "45d5149d-0f08-4fc5-9c9d-cdc122d6ab3f",
            "title": "PUT participant",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one participant",
                "fullTitle": "participants PUT participant should PUT one participant",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/participants/1').send(participant1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one participant before assertions, response header: ' + res.header);\n    console.log('should PUT one participant before assertions, response info: ' + res.info);\n    console.log('should PUT one participant before assertions, response body: ' + JSON.stringify(res.body));\n    console.log('should PUT one participant before assertions, response body name first: ' + res.body.name.first);\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id');\n    res.body.name.first.should.equal('Carol');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "d1465895-bc51-4e28-bff4-0a63cb21d4e3",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "participants PUT participant should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/participants').send(participant1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should POST one participant before assertions, response header: ' + res.header);\n    console.log('should POST one participant before assertions, response info: ' + res.info);\n    console.log('should POST one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(404);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a4d11819-fe6f-4886-92ff-a83c2b803e0b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "participants PUT participant should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/participants/fake').send(participant1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should POST one participant before assertions, response header: ' + res.header);\n    console.log('should POST one participant before assertions, response info: ' + res.info);\n    console.log('should POST one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "84ac1b80-c4f8-4fb6-a604-ad266cbd2282",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "d1465895-bc51-4e28-bff4-0a63cb21d4e3",
              "a4d11819-fe6f-4886-92ff-a83c2b803e0b",
              "84ac1b80-c4f8-4fb6-a604-ad266cbd2282"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 52,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "26d39600-9bd2-4faf-879a-151d7642ff67",
            "title": "DELETE participant",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one participant",
                "fullTitle": "participants DELETE participant should DELETE one participant",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).delete('/api/participants/1').set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should DELETE one participant before assertions, response header: ' + res.header);\n    console.log('should DELETE one participant before assertions, response info: ' + res.info);\n    console.log('should DELETE one participant before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id');\n    res.body.name.first.should.equal('Carol');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "a34901bb-d9a2-4667-a123-70ebe4152e10",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "a34901bb-d9a2-4667-a123-70ebe4152e10"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 27,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}