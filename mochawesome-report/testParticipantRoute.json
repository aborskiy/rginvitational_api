{
  "stats": {
    "suites": 6,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-28T18:26:11.095Z",
    "end": "2019-04-28T18:26:19.990Z",
    "duration": 8895,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "ab1a8618-bf09-4321-8f57-02f17151822e",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "0593142d-df03-4106-b87b-059db535551d",
        "title": "participants",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
        "file": "/test/api/routes/participants.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "participants \"before all\" hook",
            "timedOut": false,
            "duration": 7895,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "console.log(`test participants.index before starts`);\nawait requestTestAccessToken.getTestToken(callback);\nawait seed();\n//console.log(`testaccesstoken: ${testAccessToken.token_type} ${testAccessToken.access_token}`);\nconsole.log(`test participants.index before ends`);",
            "err": {},
            "isRoot": false,
            "uuid": "b50ee430-3d4b-447f-a8be-05e782103e1e",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "6b874323-dbcc-4244-a906-6a9c8a5c10d5",
            "title": "GET participants",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all participants",
                "fullTitle": "participants GET participants should get all participants",
                "timedOut": false,
                "duration": 82,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/participants')\n    //.expect(200)\n    .then(res => {\n        console.log(`GET participants test is before assertions response body: ${JSON.stringify(res.body)}`);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        //res.body.length.should.be.above(0);\n        console.log(`GET participants test is completed response body: ${JSON.stringify(res.body)}`);\n        done();\n    });;",
                "err": {},
                "isRoot": false,
                "uuid": "07f67a10-16cd-4e5e-bfd3-7f8b59176c9b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "07f67a10-16cd-4e5e-bfd3-7f8b59176c9b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 82,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "8138bbae-a9c6-4177-8f79-8b9e5e176221",
            "title": "GET participant by id",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get one participant by id",
                "fullTitle": "participants GET participant by id should get one participant by id",
                "timedOut": false,
                "duration": 37,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/participants/1')\n    .expect(200)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 200\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.id.should.equal(1);\n        console.log(`should GET one participant is completed, response body: ${JSON.stringify(res.body)}`);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "8a18f5ce-eba6-4c9b-9432-99426e157e20",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should NOT get one participant by id",
                "fullTitle": "participants GET participant by id should NOT get one participant by id",
                "timedOut": false,
                "duration": 34,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .get('/api/participants/-1')\n    .expect(404)\n    .end((err, res) => {\n        if (err) return done(err);\n        res.should.have.property('status').equal(404);\n        console.log(`should GET one participant is completed, response body: ${JSON.stringify(res.body)}`);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "28ed9299-454d-4eac-8a63-b67fc70c6cb2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "8a18f5ce-eba6-4c9b-9432-99426e157e20",
              "28ed9299-454d-4eac-8a63-b67fc70c6cb2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 71,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "162d6c91-820f-4afd-986c-b4be2509ae1e",
            "title": "POST participants",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should POST one participant",
                "fullTitle": "participants POST participants should POST one participant",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/participants')\n    .send(participant1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one participant before assertions, response header: ${res.header}`);\n        console.log(`should POST one participant before assertions, response info: ${res.info}`);\n        console.log(`should POST one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(201);\n        res.body.should.have.property('id');\n        res.body.name.first.should.equal('Carol');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "11cdea5a-30fc-414f-a2cc-42c8c47fe21e",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail with 401 UnauthorizedError when POSTing participant",
                "fullTitle": "participants POST participants should fail with 401 UnauthorizedError when POSTing participant",
                "timedOut": false,
                "duration": 19,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/participants')\n    .send(participant1)\n    .set('Accept', 'application/json')\n    .set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 401\n        console.log(`should POST one participant before assertions, response header: ${res.header}`);\n        console.log(`should POST one participant before assertions, response info: ${res.info}`);\n        console.log(`should POST one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(401);\n        //res.body.should.have.property('id');\n        res.body.should.equal('UnauthorizedError');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1c624310-d028-4326-aaa8-7418da08437f",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing participant with 'first name does not exist' error",
                "fullTitle": "participants POST participants should fail validation before POSTing participant with 'first name does not exist' error",
                "timedOut": false,
                "duration": 16,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .post('/api/participants')\n    .send(invalidParticipantNoFirstName)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    //.expect(201)\n    .end((err, res) => {\n        if (err) return done(err);\n        // HTTP status should be 201\n        console.log(`should POST one participant before assertions, response header: ${res.header}`);\n        console.log(`should POST one participant before assertions, response info: ${res.info}`);\n        console.log(`should POST one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        //res.body.should.have.property('param');\n        //res.body.param.should.equal('name.first');\n        //res.body.should.have.property('msg');\n        //res.body.msg.should.equal('first name does not exist');\n        //res.body.name.first.should.equal('Carol');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "d221f49a-c4d9-4adb-9169-995d4ddb24db",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "11cdea5a-30fc-414f-a2cc-42c8c47fe21e",
              "1c624310-d028-4326-aaa8-7418da08437f",
              "d221f49a-c4d9-4adb-9169-995d4ddb24db"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 649,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "77106436-5c7c-4e89-9952-7f4485a872fa",
            "title": "PUT participant",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one participant",
                "fullTitle": "participants PUT participant should PUT one participant",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/participants/1')\n    .send(participant1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should PUT one participant before assertions, response header: ${res.header}`);\n        console.log(`should PUT one participant before assertions, response info: ${res.info}`);\n        console.log(`should PUT one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        console.log(`should PUT one participant before assertions, response body name first: ${res.body.name.first}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.name.first.should.equal('Carol');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "b11a2a1e-1f7d-42c7-9535-6efcce4fef13",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "participants PUT participant should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 11,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/participants')\n    .send(participant1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one participant before assertions, response header: ${res.header}`);\n        console.log(`should POST one participant before assertions, response info: ${res.info}`);\n        console.log(`should POST one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(404);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "1ac9f673-dd55-49ed-b492-7e36f38f5373",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "participants PUT participant should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .put('/api/participants/fake')\n    .send(participant1)\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should POST one participant before assertions, response header: ${res.header}`);\n        console.log(`should POST one participant before assertions, response info: ${res.info}`);\n        console.log(`should POST one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(422);\n        res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "6455ec4c-5884-4108-88df-bea521c887fb",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "b11a2a1e-1f7d-42c7-9535-6efcce4fef13",
              "1ac9f673-dd55-49ed-b492-7e36f38f5373",
              "6455ec4c-5884-4108-88df-bea521c887fb"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 66,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "b34b9952-ac60-496a-b61f-9f98bfe02d12",
            "title": "DELETE participant",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/participants.js",
            "file": "/test/api/routes/participants.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one participant",
                "fullTitle": "participants DELETE participant should DELETE one participant",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(app)\n    .delete('/api/participants/1')\n    .set('Accept', 'application/json')\n    .set('Authorization', `${testAccessToken.token_type} ${testAccessToken.access_token}`)\n    //.expect('Content-Type', /json/)\n    .end((err, res) => {\n        if (err) return done(err);\n        console.log(`should DELETE one participant before assertions, response header: ${res.header}`);\n        console.log(`should DELETE one participant before assertions, response info: ${res.info}`);\n        console.log(`should DELETE one participant before assertions, response body: ${JSON.stringify(res.body)}`);\n        res.should.have.property('status').equal(200);\n        res.body.should.have.property('id');\n        res.body.name.first.should.equal('Carol');\n        done();\n    });",
                "err": {},
                "isRoot": false,
                "uuid": "78ff4f81-9f8a-4af2-97b4-0fcf5206fa13",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "78ff4f81-9f8a-4af2-97b4-0fcf5206fa13"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}