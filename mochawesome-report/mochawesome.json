{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 6,
    "pending": 0,
    "failures": 2,
    "start": "2019-04-21T02:42:56.480Z",
    "end": "2019-04-21T02:42:59.955Z",
    "duration": 3475,
    "testsRegistered": 8,
    "passPercent": 75,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "warning",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "216326a3-4d15-43b4-9d4a-049c2de0e375",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "a287e1a6-46e7-467e-adaa-29a174907953",
        "title": "rotationsession",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
        "file": "/test/api/routes/rotationsession.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "rotationsession \"before all\" hook",
            "timedOut": false,
            "duration": 11,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "47213de9-25f2-4fd8-a568-ea277caa0138",
            "isHook": true,
            "skipped": false
          },
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationsession \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n    \"onFloorParticipantId\": 3,\n    \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {};",
            "err": {},
            "isRoot": false,
            "uuid": "43d6986f-4169-4186-93a8-78c7bdd361f6",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "1025b490-47a6-4fda-bded-ebc992ff9139",
            "title": "POST rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing rotation entry",
                "fullTitle": "rotationsession POST rotationsession should fail with 401 UnauthorizedError when POSTing rotation entry",
                "timedOut": false,
                "duration": 614,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg').end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 401\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(401);\n    res.body.should.equal('UnauthorizedError');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "57e650a0-ca5a-4c4f-b573-1a2e2303454b",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing rotationsession - missing parameters",
                "fullTitle": "rotationsession POST rotationsession should fail validation before POSTing rotationsession - missing parameters",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "console.log('about to send post request to /api/rotationsession with rotationSessionMissingParms ');\nrequest(_index.app).post('/api/rotationsession').send(rotationSessionMissingParms).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.length.should.be.above(0);\n    res.body[0].msg.should.equal('onFloorParticipantId does not exist');\n    res.body[1].msg.should.equal('scoreParticipantId does not exist');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "c3f4e7d7-8812-457c-9f6d-8e65dd4cb685",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one rotationSession",
                "fullTitle": "rotationsession POST rotationsession should POST one rotationSession",
                "timedOut": false,
                "duration": 2573,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one rotationSession before assertions, response header: ' + res.header);\n    console.log('should POST one rotationSession before assertions, response info: ' + res.info);\n    console.log('should POST one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    sessionId = res.body._id;\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f584786e-fb8c-4f8e-a163-107abc052586",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "57e650a0-ca5a-4c4f-b573-1a2e2303454b",
              "c3f4e7d7-8812-457c-9f6d-8e65dd4cb685",
              "f584786e-fb8c-4f8e-a163-107abc052586"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 3218,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "20deed13-879f-49a8-bef3-e71cf8e504f6",
            "title": "GET rotationsession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get rotationsession",
                "fullTitle": "rotationsession GET rotationsession should get rotationsession",
                "timedOut": false,
                "duration": 31,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/rotationsession')\n//.expect(200)\n.end(function (err, res) {\n    console.log('GET rotationsession test is before assertions response body: ' + JSON.stringify(res.body));\n    if (err) return done(err);\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.length.should.be.above(0);\n    //res.body.length.should.be.above(0);\n    console.log('GET rotationsession test is completed response body: ' + JSON.stringify(res.body));\n    sessionId = res.body._id;\n    done();\n});;",
                "err": {},
                "isRoot": false,
                "uuid": "425e61f0-c82f-43e8-a20b-c3ce28430c3f",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "425e61f0-c82f-43e8-a20b-c3ce28430c3f"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 31,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "d37ee142-4f20-4cc4-b473-ad813767892f",
            "title": "PUT rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one rotationSession",
                "fullTitle": "rotationsession PUT rotationSession should PUT one rotationSession",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(_index.app).put('/api/rotationsession/' + sessionId).send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    done();\n});",
                "err": {
                  "message": "AssertionError: expected 422 to be 200",
                  "estack": "AssertionError: expected 422 to be 200\n    at Assertion.fail (node_modules/should/cjs/should.js:275:17)\n    at Assertion.value (node_modules/should/cjs/should.js:356:19)\n    at Test.<anonymous> (test/api/routes/rotationsession.js:149:56)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at Server.localAssert (node_modules/supertest/lib/test.js:131:12)\n    at emitCloseNT (net.js:1629:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                  "diff": "- 422\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "7b479a16-c29e-4762-a146-ed1f8b0ec93c",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "rotationsession PUT rotationSession should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 17,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/rotationsession').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(404);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "4e99e893-189b-4817-b91c-d31a48bdbb47",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "rotationsession PUT rotationSession should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 13,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/rotationsession/fake').send(rotationSession).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one rotationSession before assertions, response header: ' + res.header);\n    console.log('should PUT one rotationSession before assertions, response info: ' + res.info);\n    console.log('should PUT one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "28734782-31a9-4826-8fc8-bb82d6d22b8a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "4e99e893-189b-4817-b91c-d31a48bdbb47",
              "28734782-31a9-4826-8fc8-bb82d6d22b8a"
            ],
            "failures": [
              "7b479a16-c29e-4762-a146-ed1f8b0ec93c"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "164af20a-b2b1-43c8-b8d7-a0adea41f008",
            "title": "DELETE rotationSession",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/rotationsession.js",
            "file": "/test/api/routes/rotationsession.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one rotationSession",
                "fullTitle": "rotationsession DELETE rotationSession should DELETE one rotationSession",
                "timedOut": false,
                "duration": 0,
                "state": "failed",
                "pass": false,
                "fail": true,
                "pending": false,
                "code": "request(_index.app).delete('/api/rotationsession/1').set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should DELETE one rotationSession before assertions, response header: ' + res.header);\n    console.log('should DELETE one rotationSession before assertions, response info: ' + res.info);\n    console.log('should DELETE one rotationSession before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('onFloorParticipantId');\n    res.body.should.have.property('scoreParticipantId');\n    res.body.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    res.body.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    done();\n});",
                "err": {
                  "message": "AssertionError: expected 404 to be 200",
                  "estack": "AssertionError: expected 404 to be 200\n    at Assertion.fail (node_modules/should/cjs/should.js:275:17)\n    at Assertion.value (node_modules/should/cjs/should.js:356:19)\n    at Test.<anonymous> (test/api/routes/rotationsession.js:203:56)\n    at Test.assert (node_modules/supertest/lib/test.js:181:6)\n    at Server.localAssert (node_modules/supertest/lib/test.js:131:12)\n    at emitCloseNT (net.js:1629:8)\n    at process._tickCallback (internal/process/next_tick.js:63:19)",
                  "diff": "- 404\n+ 200\n"
                },
                "isRoot": false,
                "uuid": "4b066419-7a3e-4f09-8acd-a8c6f9a5552a",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [],
            "failures": [
              "4b066419-7a3e-4f09-8acd-a8c6f9a5552a"
            ],
            "pending": [],
            "skipped": [],
            "duration": null,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}