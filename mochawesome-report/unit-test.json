{
  "stats": {
    "suites": 4,
    "tests": 9,
    "passes": 9,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-24T02:21:39.166Z",
    "end": "2019-04-24T02:21:39.334Z",
    "duration": 168,
    "testsRegistered": 9,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "f30280e9-a507-49b0-945d-b5ba2f356222",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "4312094d-bd37-4c08-992e-793e722b5731",
        "title": "participantInfoModel Tests",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/models/participantInfoModel.js",
        "file": "/test/api/models/participantInfoModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "participantInfoModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 1,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "participantInfo = {\n    \"name\": {\n        \"first\": \"Carol\",\n        \"last\": \"MacDonald\"\n    },\n    \"team\": \"USA\"\n};",
            "err": {},
            "isRoot": false,
            "uuid": "7b76ef57-93d4-45c2-93c8-674a0dba6488",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a participantInfo",
            "fullTitle": "participantInfoModel Tests should validate a participantInfo",
            "timedOut": false,
            "duration": 29,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _participantInfoModel2.default(participantInfo);\nmodel.validate(function (err) {\n    _should2.default.not.exist(err);\n    console.log('test participantInfoModel model ' + model);\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('updated');\n    (0, _should2.default)(model.name.first).be.a.String();\n    model.name.first.should.equal(participantInfo.name.first);\n    model.name.last.should.equal(participantInfo.name.last);\n    model.team.should.equal(participantInfo.team);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "462bfbc8-efa7-4fe7-af18-88e7940a2c86",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "participantInfoModel Tests should validate required properties",
            "timedOut": false,
            "duration": 7,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var badParticipantInfo = {\n            model: \"Not real\"\n        };\n        var model = new _participantInfoModel2.default(badParticipantInfo);\n        model.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"name.first\");\n            errors.should.have.property(\"name.last\");\n            errors.should.have.property(\"team\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "8b62d1b9-c50a-4e4c-aaa3-57394f63cd3f",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "462bfbc8-efa7-4fe7-af18-88e7940a2c86",
          "8b62d1b9-c50a-4e4c-aaa3-57394f63cd3f"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 36,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "82533adf-8308-4001-a0b1-2c2536e08ab1",
        "title": "participantScoreModel Tests",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/models/participantScoreModel.js",
        "file": "/test/api/models/participantScoreModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "participantScoreModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "participantScores = {\n    \"id\": 378,\n    \"name\": \"Carol MacDonald\",\n    \"team\": \"USA\",\n    \"scores\": [{\n        \"id\": \"floor\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n    }, {\n        \"id\": \"rope\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n    }, {\n        \"id\": \"hoop\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n    }, {\n        \"id\": \"ribbon\",\n        \"diff\": 0,\n        \"exec\": 0,\n        \"deduct\": 0,\n        \"total\": 0\n    }],\n    \"total\": 0\n};",
            "err": {},
            "isRoot": false,
            "uuid": "7e88d628-a58c-42b8-a7ae-671b9b6e4352",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a participantScore",
            "fullTitle": "participantScoreModel Tests should validate a participantScore",
            "timedOut": false,
            "duration": 23,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _participantScoreModel2.default(participantScores);\nmodel.validate(function (err) {\n    _should2.default.not.exist(err);\n    console.log('test participantScoreModel model ' + model);\n    model.should.have.property('id');\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('scores');\n    model.should.have.property('updated');\n    model.should.have.property('total');\n    (0, _should2.default)(model.name).be.a.String();\n    model.name.should.equal(participantScores.name);\n    model.team.should.equal(participantScores.team);\n    model.scores.should.be.an.instanceof(Array);\n    model.scores.length.should.equal(4);\n    model.scores[0].should.have.property('id');\n    (0, _should2.default)(model.scores[0].id).be.a.String();\n    model.scores[0].id.should.equal(participantScores.scores[0].id);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "0c6bc8d4-0c4e-4c2a-974e-91c16b4963b7",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "participantScoreModel Tests should validate required properties",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var badParticipantScores = {\n            model: \"Not real\"\n        };\n        var model = new _participantScoreModel2.default(badParticipantScores);\n        model.validate(function (err) {\n            var errors = err.errors;\n            errors.should.have.property(\"id\");\n            errors.should.have.property(\"name\");\n            errors.should.have.property(\"team\");\n            errors.should.have.property(\"total\");\n            done();\n        });",
            "err": {},
            "isRoot": false,
            "uuid": "b52ca12a-f352-4709-9556-69f1d7e1cc6b",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "0c6bc8d4-0c4e-4c2a-974e-91c16b4963b7",
          "b52ca12a-f352-4709-9556-69f1d7e1cc6b"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 25,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "4aa85a31-8fbb-4d00-bcc1-7610b803e9df",
        "title": "rotationEntryModel Tests",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/models/rotationEntryModel.js",
        "file": "/test/api/models/rotationEntryModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationEntryModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationEntry = {\n    \"rotaId\": 1,\n    \"participantId\": 908,\n    \"name\": \"Julia B\",\n    \"team\": \"RUS\",\n    \"apparatus\": {\n        \"id\": \"floor\",\n        \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"floor\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n};\nrotationEntryInvalidApparatusId = {\n    \"rotaId\": 2,\n    \"participantId\": 908,\n    \"name\": \"Julia B\",\n    \"team\": \"RUS\",\n    \"apparatus\": {\n        \"id\": \"dummy\",\n        \"imageurl\": \"images/floor-min-2.png\"\n    },\n    \"score\": {\n        \"id\": \"floor\",\n        \"diff\": 9.3,\n        \"exec\": 9,\n        \"deduct\": 0.1,\n        \"total\": 18.2\n    }\n};",
            "err": {},
            "isRoot": false,
            "uuid": "8b7472a6-58a1-487e-a1a5-c686efe99fbf",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a rotationEntry",
            "fullTitle": "rotationEntryModel Tests should validate a rotationEntry",
            "timedOut": false,
            "duration": 17,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _rotationEntryModel2.default(rotationEntry);\nconsole.log('rotationEntryModel instance: ' + model);\nmodel.validate(function (err) {\n    _should2.default.not.exist(err);\n    console.log('test rotationEntryModel model ' + model);\n    model.should.have.property('rotaId');\n    model.should.have.property('participantId');\n    model.should.have.property('name');\n    model.should.have.property('team');\n    model.should.have.property('apparatus');\n    model.should.have.property('score');\n    model.should.have.property('updated');\n    (0, _should2.default)(model.rotaId).be.a.Number();\n    (0, _should2.default)(model.participantId).be.a.Number();\n    (0, _should2.default)(model.name).be.a.String();\n    model.rotaId.should.equal(rotationEntry.rotaId);\n    model.team.should.equal(rotationEntry.team);\n    model.score.should.have.property('id');\n    (0, _should2.default)(model.score.id).be.a.String();\n    model.score.id.should.equal(rotationEntry.score.id);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "5955de85-1189-4e9a-835f-24ea0b3f9e20",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "rotationEntryModel Tests should validate required properties",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var badRotationEntry = {\n    model: \"Not real\"\n};\nvar model = new _rotationEntryModel2.default(badRotationEntry);\nmodel.validate(function (err) {\n    var errors = err.errors;\n    errors.should.have.property(\"participantId\");\n    errors.should.have.property(\"name\");\n    errors.should.have.property(\"team\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "8fe7f09b-7a94-491a-b901-d282f59633aa",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should fail when invalid apparatus id",
            "fullTitle": "rotationEntryModel Tests should fail when invalid apparatus id",
            "timedOut": false,
            "duration": 9,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _rotationEntryModel2.default(rotationEntryInvalidApparatusId);\nmodel.validate(function (err) {\n    var errors = err.errors;\n    console.log('errors: ' + errors.MongooseError);\n    errors.should.have.property(\"apparatus.id\");\n    errors[\"apparatus.id\"].should.have.property(\"name\");\n    errors[\"apparatus.id\"].name.should.equal('ValidatorError');\n    errors[\"apparatus.id\"].message.should.equal('`dummy` is not a valid enum value for path `id`.');\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "eb3ad9eb-9aec-4ee2-88a4-cef225211fc7",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "5955de85-1189-4e9a-835f-24ea0b3f9e20",
          "8fe7f09b-7a94-491a-b901-d282f59633aa",
          "eb3ad9eb-9aec-4ee2-88a4-cef225211fc7"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 28,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      },
      {
        "uuid": "308b0ea0-f4c7-4221-bbc7-213f2d9a3381",
        "title": "rotationSessionModel Tests",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/models/rotationSessionModel.js",
        "file": "/test/api/models/rotationSessionModel.js",
        "beforeHooks": [
          {
            "title": "\"before each\" hook",
            "fullTitle": "rotationSessionModel Tests \"before each\" hook",
            "timedOut": false,
            "duration": 0,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "rotationSession = {\n    \"onFloorParticipantId\": 3,\n    \"scoreParticipantId\": 1\n};\nrotationSessionMissingParms = {};",
            "err": {},
            "isRoot": false,
            "uuid": "a2c543b6-acb5-4f38-8953-d4c37388c186",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [
          {
            "title": "should validate a rotationSession",
            "fullTitle": "rotationSessionModel Tests should validate a rotationSession",
            "timedOut": false,
            "duration": 3,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _rotationSessionModel2.default(rotationSession);\nconsole.log('rotationSessionModel instance: ' + model);\nmodel.validate(function (err) {\n    _should2.default.not.exist(err);\n    console.log('test rotationSessionModel model ' + model);\n    model.should.have.property('onFloorParticipantId');\n    model.should.have.property('scoreParticipantId');\n    (0, _should2.default)(model.onFloorParticipantId).be.a.Number();\n    (0, _should2.default)(model.scoreParticipantId).be.a.Number();\n    model.onFloorParticipantId.should.equal(rotationSession.onFloorParticipantId);\n    model.scoreParticipantId.should.equal(rotationSession.scoreParticipantId);\n    model.updated.should.be.an.instanceof(Date);\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "88df3b8e-9589-4f89-8005-677f7ad34c1b",
            "isHook": false,
            "skipped": false
          },
          {
            "title": "should validate required properties",
            "fullTitle": "rotationSessionModel Tests should validate required properties",
            "timedOut": false,
            "duration": 2,
            "state": "passed",
            "speed": "fast",
            "pass": true,
            "fail": false,
            "pending": false,
            "code": "var model = new _rotationSessionModel2.default(rotationSessionMissingParms);\nmodel.validate(function (err) {\n    var errors = err.errors;\n    errors.should.have.property(\"onFloorParticipantId\");\n    errors.should.have.property(\"scoreParticipantId\");\n    done();\n});",
            "err": {},
            "isRoot": false,
            "uuid": "6081d04e-0c4f-4e09-bd53-a5840811b405",
            "isHook": false,
            "skipped": false
          }
        ],
        "suites": [],
        "passes": [
          "88df3b8e-9589-4f89-8005-677f7ad34c1b",
          "6081d04e-0c4f-4e09-bd53-a5840811b405"
        ],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 5,
        "root": false,
        "rootEmpty": false,
        "_timeout": 2000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 2000
  },
  "copyrightYear": 2019
}