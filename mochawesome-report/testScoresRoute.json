{
  "stats": {
    "suites": 5,
    "tests": 8,
    "passes": 8,
    "pending": 0,
    "failures": 0,
    "start": "2019-04-24T02:20:32.391Z",
    "end": "2019-04-24T02:20:34.571Z",
    "duration": 2180,
    "testsRegistered": 8,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false,
    "passPercentClass": "success",
    "pendingPercentClass": "danger"
  },
  "suites": {
    "uuid": "3b2768c0-3575-4138-b053-f821b2df6559",
    "title": "",
    "fullFile": "",
    "file": "",
    "beforeHooks": [],
    "afterHooks": [],
    "tests": [],
    "suites": [
      {
        "uuid": "491dc72c-1e38-48c6-92a3-865a7cd58b87",
        "title": "scores",
        "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/scores.js",
        "file": "/test/api/routes/scores.js",
        "beforeHooks": [
          {
            "title": "\"before all\" hook",
            "fullTitle": "scores \"before all\" hook",
            "timedOut": false,
            "duration": 1362,
            "pass": false,
            "fail": false,
            "pending": false,
            "code": "var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); });",
            "err": {},
            "isRoot": false,
            "uuid": "29dc029b-a2e1-4afb-ac8e-d2d8e744316f",
            "isHook": true,
            "skipped": false
          }
        ],
        "afterHooks": [],
        "tests": [],
        "suites": [
          {
            "uuid": "8e7f3333-0dbb-44ff-bb7e-405faa7dc7e2",
            "title": "GET scores",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should get all scores",
                "fullTitle": "scores GET scores should get all scores",
                "timedOut": false,
                "duration": 93,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).get('/api/scores')\n//.expect(200)\n.then(function (res) {\n    console.log('GET scores test is before assertions response body: ' + JSON.stringify(res.body));\n    // HTTP status should be 200\n    res.should.have.property('status').equal(200);\n    res.body.length.should.be.above(0);\n    //res.body.length.should.be.above(0);\n    console.log('GET scores test is completed response body: ' + JSON.stringify(res.body));\n    done();\n});;",
                "err": {},
                "isRoot": false,
                "uuid": "9bbf9628-8d2b-4abe-a168-6dbb83e67de2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "9bbf9628-8d2b-4abe-a168-6dbb83e67de2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 93,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "991dd4b3-e141-457f-9e4c-6c9a5d17bdad",
            "title": "POST scores",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should fail with 401 UnauthorizedError when POSTing participant",
                "fullTitle": "scores POST scores should fail with 401 UnauthorizedError when POSTing participant",
                "timedOut": false,
                "duration": 375,
                "state": "passed",
                "speed": "slow",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/scores').send(score1).set('Accept', 'application/json').set('Authorization', 'Bearer eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsImtpZCI6Ik1qWTFNVUkzTkVFMU16YzJNMFl6TURkRE1rUkNPREk1UkVKR00wSkNPVGN5TmpSR00wUkdPUSJ9.eyJpc3MiOiJodHRwczovL2Fib3Jza2l5LmF1dGgwLmNvbS8iLCJzdWIiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5a0BjbGllbnRzIiwiYXVkIjoiaHR0cHM6Ly9hYm9yc2tpeS5hdXRoMC5jb20vYXBpL3YyLyIsImlhdCI6MTU1NDk0OTM5OCwiZXhwIjoxNTU1MDM1Nzk4LCJhenAiOiJCWnI0V3pBTTZWbzBLSFY2YnlObDZZYlZqNVlXTTF5ayIsImd0eSI6ImNsaWVudC1jcmVkZW50aWFscyJ9.fvhiPoafkCYU_aEaQH1D7PJFVzNc7A3bVCyhrx_qjWUEnhHwBYll8hKWiU1A5xLV_8xktGtBJ1BFxeOrKdXJssjbSCHodShOxRzqbORDGE_Eppds1yS4WSH4ecwZ0YMovnPT_j99iP0Zcw9VB9MrMmxZLHkqtbl2ObPXvwb53eJ9Tps_Il-fwSUfV-aGyO7qqRPE5k3Qk75Q9s9RelXU9xNtpdnnrK9q2mqTaXlpVlQPsg_wbaNqBpgh9RDE9smXIsQE5NH79EbZZg4YAlVOAnSzW5R1V1K-pxSXvKjUaq6asGCIqA1Q4HgYImfj-N_4J6dHffLNMgIpnXm3EYaXkg')\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 401\n    console.log('should POST one score before assertions, response header: ' + res.header);\n    console.log('should POST one score before assertions, response info: ' + res.info);\n    console.log('should POST one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(401);\n    res.body.should.equal('UnauthorizedError');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f5bb2aca-38b4-416c-93de-97bf1b057020",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail validation before POSTing score with '4 scores must be present' error",
                "fullTitle": "scores POST scores should fail validation before POSTing score with '4 scores must be present' error",
                "timedOut": false,
                "duration": 24,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/scores').send(invalidScoreNoScores).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one score before assertions, response header: ' + res.header);\n    console.log('should POST one score before assertions, response info: ' + res.info);\n    console.log('should POST one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body[0].msg.should.equal('name does not exist');\n    res.body[3].msg.should.equal('4 scores must be present');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "1bf33f3d-c1c0-451d-a2a3-286c5777afd4",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should POST one score",
                "fullTitle": "scores POST scores should POST one score",
                "timedOut": false,
                "duration": 27,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).post('/api/scores').send(score1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n//.expect(201)\n.end(function (err, res) {\n    if (err) return done(err);\n    // HTTP status should be 201\n    console.log('should POST one score before assertions, response header: ' + res.header);\n    console.log('should POST one score before assertions, response info: ' + res.info);\n    console.log('should POST one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(201);\n    res.body.should.have.property('id');\n    res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n    res.body.name.should.equal('Carol MacDonald');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "60065383-937f-4968-aff2-ab11e4509f8b",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f5bb2aca-38b4-416c-93de-97bf1b057020",
              "1bf33f3d-c1c0-451d-a2a3-286c5777afd4",
              "60065383-937f-4968-aff2-ab11e4509f8b"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 426,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "204dfe70-6674-4b63-98aa-ebaecbdb56d4",
            "title": "PUT participant",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should PUT one score",
                "fullTitle": "scores PUT participant should PUT one score",
                "timedOut": false,
                "duration": 55,
                "state": "passed",
                "speed": "medium",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/scores/901').send(score1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should PUT one score before assertions, response header: ' + res.header);\n    console.log('should PUT one score before assertions, response info: ' + res.info);\n    console.log('should PUT one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id');\n    res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n    res.body.name.should.equal('Carol MacDonald');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "6dd63d89-5a41-4b0a-b4b5-9a18b3c73482",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail finding PUT request without param id with 404",
                "fullTitle": "scores PUT participant should fail finding PUT request without param id with 404",
                "timedOut": false,
                "duration": 6,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/scores').send(score1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should POST one score before assertions, response header: ' + res.header);\n    console.log('should POST one score before assertions, response info: ' + res.info);\n    console.log('should POST one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(404);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "48cb0f39-8b88-4860-97fa-8530732e8de5",
                "isHook": false,
                "skipped": false
              },
              {
                "title": "should fail PUT request validation with not numeric id parameter",
                "fullTitle": "scores PUT participant should fail PUT request validation with not numeric id parameter",
                "timedOut": false,
                "duration": 14,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).put('/api/scores/fake').send(score1).set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token).end(function (err, res) {\n    if (err) return done(err);\n    console.log('should POST one score before assertions, response header: ' + res.header);\n    console.log('should POST one score before assertions, response info: ' + res.info);\n    console.log('should POST one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(422);\n    res.body.should.be.instanceof(Array).and.have.lengthOf(1);\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "7de3c10d-eac3-4c0d-a6b9-689a658bd6e2",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "6dd63d89-5a41-4b0a-b4b5-9a18b3c73482",
              "48cb0f39-8b88-4860-97fa-8530732e8de5",
              "7de3c10d-eac3-4c0d-a6b9-689a658bd6e2"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 75,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          },
          {
            "uuid": "8eaccc67-7abf-4a81-b85a-21f7b4e76c0a",
            "title": "DELETE score",
            "fullFile": "/Users/aborskiy/WIT_EntWebDev/RGInvitational_API/test/api/routes/scores.js",
            "file": "/test/api/routes/scores.js",
            "beforeHooks": [],
            "afterHooks": [],
            "tests": [
              {
                "title": "should DELETE one score",
                "fullTitle": "scores DELETE score should DELETE one score",
                "timedOut": false,
                "duration": 21,
                "state": "passed",
                "speed": "fast",
                "pass": true,
                "fail": false,
                "pending": false,
                "code": "request(_index.app).delete('/api/scores/901').set('Accept', 'application/json').set('Authorization', testAccessToken.token_type + ' ' + testAccessToken.access_token)\n//.expect('Content-Type', /json/)\n.end(function (err, res) {\n    if (err) return done(err);\n    console.log('should DELETE one score before assertions, response header: ' + res.header);\n    console.log('should DELETE one score before assertions, response info: ' + res.info);\n    console.log('should DELETE one score before assertions, response body: ' + JSON.stringify(res.body));\n    res.should.have.property('status').equal(200);\n    res.body.should.have.property('id');\n    res.body.scores.should.be.instanceof(Array).and.have.lengthOf(4);\n    res.body.name.should.equal('Carol MacDonald');\n    done();\n});",
                "err": {},
                "isRoot": false,
                "uuid": "f8f6d9e9-4361-4ce1-b490-501ee641bcba",
                "isHook": false,
                "skipped": false
              }
            ],
            "suites": [],
            "passes": [
              "f8f6d9e9-4361-4ce1-b490-501ee641bcba"
            ],
            "failures": [],
            "pending": [],
            "skipped": [],
            "duration": 21,
            "root": false,
            "rootEmpty": false,
            "_timeout": 10000
          }
        ],
        "passes": [],
        "failures": [],
        "pending": [],
        "skipped": [],
        "duration": 0,
        "root": false,
        "rootEmpty": false,
        "_timeout": 10000
      }
    ],
    "passes": [],
    "failures": [],
    "pending": [],
    "skipped": [],
    "duration": 0,
    "root": true,
    "rootEmpty": true,
    "_timeout": 10000
  },
  "copyrightYear": 2019
}